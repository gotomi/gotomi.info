[{"data":{"title":"Managing Frontend in the Microservices Architecture","author":["bartosz.galek","bartosz.walacik","pawel.wieladek"],"tags":["frontend","microservices","architecture"]},"content":"<p><a href=\"http://martinfowler.com/articles/microservices.html\">Microservices</a>\nare now the mainstream approach for scalable systems architecture.\nThere is little controversy when we are talking about designing backend services.\nWell-behaved backend microservice should cover one\n<a href=\"http://martinfowler.com/bliki/BoundedContext.html\">BoundedContext</a>\nand communicate over the REST API. <br/>\nThings get complicated when we need to\nuse microservices as building blocks for a frontend solution.\nHow to build a consistent website or a mobile app\nusing tens or sometimes hundreds of microservices?</p>\n<!--more-->\n<p>In this post we describe our current web frontend approach\nand the new one, meant as a small revolution.</p>\n<h2>Doing frontend in the microservices world is tricky</h2>\n<p>Our users don’t care how good we are at dividing our backend into microservices.\nThe question is how good we are at integrating them in a user’s browser.</p>\n<p>Typically, to process one HTTP request sent by a user, we need to collect data from many\nmicroservices.\nFor example, when a user runs a search query on our site, we send him the Listing page.\nThis page collects data from several services: AllegroHeader, Cart, Search, Category Tree, Listing, SEO, Recommendations, etc.\nSome of them provide only data (like Search) and some provide ready-to-serve HTML fragments (like AllegroHeader).\nEach service is maintained by a separate team with various frontend skills.</p>\n<p>Developing modern frontend isn’t easy. Following aspects are involved:</p>\n<ul>\n<li>Classical SOA-style data integration, often done by a dedicated service, called\n<a href=\"http://samnewman.io/patterns/architectural/bff/\">Backend for Frontends</a> or Edge Service.</li>\n<li>Managing frontend dependencies (JS, CSS, etc.) required by various HTML fragments.</li>\n<li>Allowing interactions between HTML fragments served by different services.</li>\n<li>Consistent way of measuring users’ activities (traffic analytics).</li>\n<li>Content customization.</li>\n<li>Providing tools for <a href=\"https://en.wikipedia.org/wiki/A/B_testing\">A/B testing</a>.</li>\n<li>Handling errors and slow responses from backend services.</li>\n<li>There are many frontend devices: web browser, mobile… Smart TV and PlayStation® are waiting in the queue.</li>\n<li>Offering excellent UX to all users (<a href=\"https://en.wikipedia.org/wiki/Multichannel_retailing\">omnichannel</a>).</li>\n</ul>\n<p>The last two things are most important and most challenging.\nThis means that your frontend applications should be consistent, well integrated and <em>smooth</em>.\nEven if they shouldn’t necessarily be monolithic they should <em>look like</em> a monolith.</p>\n<p>Let me give you an example from Spotify.\nYou can listen to the music on a TV set using PS4 Spotify app.\nThen you can switch to Spotify app running on your laptop.\nBoth apps give you a similar <em>look and feel</em>.\nNot bad, but do you know that you can control what PS4 plays\nby clicking on your laptop? It just works. That’s really impressive.</p>\n<p>There are two opposite approaches to modern frontend architecture.</p>\n<ul>\n<li>Monolith approach</li>\n<li>Frankenstein approach</li>\n</ul>\n<p><strong>Monolith approach</strong> is dead simple: one frontend team creates and maintains one frontend application,\nwhich gathers data from backend services using REST API. This approach has one huge advantage, if done right,\nit provides excellent user experience. Main disadvantage is that it doesn’t scale well. In a big company,\nwith many development teams,\nsingle frontend team could become a development bottleneck.</p>\n<p>In <strong>Frankenstein approach</strong> (shared nothing) approach,\nfrontend application is divided into modules and each module is developed independently by separate teams.</p>\n<p>In Web applications modules are HTML page fragments (like AllegroHeader, Cart, Search).\nEach team takes whole responsibility for their product. So a team develops not only backend logic\nbut also provides an endpoint which serves HTML fragment with their <em>piece of frontend</em>.\nThen, HTML page is assembled using some low level server-side includes technology like\n<a href=\"https://en.wikipedia.org/wiki/Edge_Side_Includes\">ESI</a> tags.</p>\n<p>This approach scales well, but the big disadvantage is a lack of consistency on the user side.\nSeams between page fragments become visible, page-level interactions are limited.\nEven in page scope, each page fragment may look, or even worse, behave in a different way.\nPretty much like the Frankenstein monster.</p>\n<p><strong>Between Monolith and Frankenstein</strong> there is a whole spectrum of possible architectures.\nWhat we want to build is the desirable middle ground between these two extremes.</p>\n<p>Next, we describe the current approach at Allegro, which is close to the Frankenstein extreme\nand the new solution, which goes more into the monolith direction.</p>\n<h2>Current approach at Allegro</h2>\n<p>Nowadays at Allegro we have to struggle with the legacy monolithic application\n(written in PHP) and with many new microservices (written mostly in Java).\nEverything is integrated by <a href=\"https://www.varnish-cache.org\">Varnish Cache</a> —\nweb application accelerator (a caching HTTP reverse proxy).</p>\n<p>Varnish and its <a href=\"https://www.w3.org/TR/esi-lang\">ESI LANG</a> features\nallow us to merge a lot of different parts of our platform into one website.\nTherefore any page (or a page fragment) at Allegro\ncan be a separate application.\nFor example, main page is composed in the following way:</p>\n<p><img src=\"/img/articles/2016-01-31-Managing-Frontend-in-the-microservices-architecture/allegro_esi_homepage.jpg\" alt=\"ESI Page Example\" title=\"esi page example\"></p>\n<p>Our Varnish farm also defines and greatly improves our overall performance.\nVarnish servers are exposed to users and they cache all requests for static content.\nWe often say that <em>we are hiding behind Varnish</em> to survive the massive traffic from our users.</p>\n<p>Varnish really hit the bull’s-eye.</p>\n<p>Below, we describe one page fragment, included in each page — the AllegroHeader.</p>\n<p><strong>AllegroHeader</strong> is a service that returns a complete, self-contained page fragment along with\nall needed JS and CSS files — so it can be easily included\nusing the ESI tag at the beginning of any webpage. Under the hood it collects data from a few other services\nlike category service or cart service. It integrates the search box and it’s responsible for top level messages\n(cookies policy warning, under maintenance banner).</p>\n<h3>What has gone wrong?</h3>\n<p>Each page fragment comes with its own set of frontend assets: CSS, JavaScripts, fonts and images.\nAt the page level, it sometimes leads to duplications and version conflicts.\nMany page fragments depend implicitly on assets provided by the AllegroHeader.</p>\n<p>But what if we want to create a page without any AllegroHeader at all?\nOr even worse —\nhow to handle two different versions of <a href=\"https://facebook.github.io/react/\">React</a> within a single page?</p>\n<p>Current approach based on Varnish server-side includes is\nflexible, scalable and easy to develop but unfortunately, it’s hard to maintain.</p>\n<p>Moreover, because every page fragment is a separate web application, it’s really hard to ensure\nconsistent look and feel on the website level.</p>\n<p>We just had to think of a better way…</p>\n<h2>OpBox project — the New Frontend solution</h2>\n<p>So Box is the main concept in our solution. What is Box after all?</p>\n<ul>\n<li>Box is a reusable, high-level frontend component.</li>\n<li>Box is feedable from a REST/JSON data source.</li>\n<li>Box can have slots. In each slot you can put more Boxes.</li>\n<li>Box can be rendered conditionally (for example, depending on A/B test variant).</li>\n<li>Page is assembled from Boxes.</li>\n</ul>\n<p style=\"text-align: center; background-color:#E3E3E3\">\n    <img alt=\"OpBox goals\" style=\"width:75%; padding-top:10px;\" src=\"/img/articles/2016-01-31-Managing-Frontend-in-the-microservices-architecture/opbox-goals.png\" />\n</p>\n<h3>OpBox principles</h3>\n<p>Below, we describe principles of OpBox architecture and functionality.\nMost of them are already implemented and battle-tested. Last two are\nin the design phase.</p>\n<p><strong>Dynamic page creation (CMS-like)</strong><br/>\nPages are created and maintained\nby non-technical users in our Admin application.</p>\n<p><strong>Reusable components</strong><br/>\nEach page is assembled from boxes like AllegroHeader, ShowCase, OfferList, Tabs.\nBoxes are configured to show required content, typically provided via REST API by backend services.</p>\n<p><strong>Separating View from Data Sources</strong><br/>\nBox is a high-level abstraction. It joins two things:</p>\n<ul>\n<li>Frontend design (often referred to as a View).\nConcrete View implementation is called <em>frontend component</em>.\nFor example, our ShowCase box has two frontend implementations: Web and Mobile.</li>\n<li>Data-source (REST service) which feeds data for frontend components.\nOne component can be fed by any data-source as soon as its API matches the Box contract.\nFor example, Offer component knows how to present a nice offer box\nwith offer title, price, image and so on.\nSince Offer component is decoupled from backends by the Box contract abstraction,\nit can show offers from many sources: Recommendations, Listing or Ads services.</li>\n</ul>\n<p><strong>Conditional content</strong><br/>\nBoxes can be rendered conditionally as a way to provide content customization.\nVarious types of conditions are implemented:</p>\n<ul>\n<li>date from/to condition,</li>\n<li>A/B test condition,</li>\n<li>condition based on user profile.</li>\n</ul>\n<p>For example, page editor can prepare two versions of given box,\none for male users and another for female users.\nAt runtime, when page is rendered, user’s gender is identified\nand one of these two boxes is pruned from the boxes tree.</p>\n<p><strong>Consistent traffic analytics</strong><br/>\nBasic traffic analytics is easy to achieve. It’s enough to include a tracking script in\nthe page footer. When a page is opened by a user, the script reports a PageView event.</p>\n<p>What we need is fine-grained data:</p>\n<ul>\n<li>BoxView event — when box is shown in a browser viewport.</li>\n<li>BoxClick event — when users click on a link which navigates them from one box to another\n(for example Recommendation Box can emmit a BoxClick event when users click\non one of the recommended products).</li>\n</ul>\n<p>Once we have this data, we can calculate click-through rate (<a href=\"https://en.wikipedia.org/wiki/Click-through_rate\">CTR</a>).\nfor each box.\nCTR is valuable information for page editors as it helps them to decide\nwhich boxes should be promoted and which should be removed from a page.</p>\n<p><strong>Multi-frontend</strong><br/>\nOne of the OpBox key features is separating page definitions\nfrom frontend renderers.\nPage definition is a JSON document containing the page structure and data (content).\nIt’s up to the renderer how the page is presented to frontend users.</p>\n<p>For now, we have two renderers: Web —\nresponsible for serving HTML and Mobile — responsible for presenting the same content in the Android app.</p>\n<p><strong>One place for integrating backend services through REST API</strong><br/>\nOpBox Core does the whole data integration job\nand sends complete page definitions to frontend renderers.</p>\n<p>It’s a great advantage for frontend developers.\nThey can treat OpBox Core as the single point of contact and the facade to various backend services.</p>\n<p><strong>Future: component Event Bus</strong><br/>\nThere are many use cases when we want Boxes to interact with each other.\nFor example, our Search page lets user search through offers available on Allegro.\nSearch results are shown by the Listing box.\nBelow we have Recommendations box which shows some offers, possibly related with the search query.</p>\n<p>What if we would like to remove an offer from Recommendations box when it\nhappens to be already shown by Listing box?\nOne of the possible solutions is to implement such interactions at the frontend side.</p>\n<p>Desired solution would let rendered Boxes to talk to each other via a\npublish-subscribe message bus, e.g.:</p>\n<p>“Hi, I’m Listing box, I’ve just arrived to a client’s browser to show offers A, C and X.”<br/>\n“Hi, I’m Recommendations box,\nI’m here for a while and I’m showing offers D, E and X. Ouch! Looks like I’m supposed\nto replace X with something different.”</p>\n<p><strong>Future: dependency management</strong><br/>\nEach page is assembled from frontend components developed by different\nteams.\nSince we don’t force frontend developers to use any particular technology,\neach component requires its own dependency set of various kind:\nCSS, JS libraries, fonts and so on.</p>\n<p>Reconciliation of all of those dependency sets is kind of advanced topic and\nto be honest, we don’t have any well-thought-out plan for this yet.</p>\n<h3>How we did it</h3>\n<p>OpBox system is implemented in microservice architecture.\nAs you can see below, it consists of four sub-systems: Core, Web, Admin and Mobile.</p>\n<p style=\"text-align: center; background-color:#E3E3E3\">\n    <img alt=\"OpBox architecture\" style=\"width:75%; padding-top:10px;\" src=\"/img/articles/2016-01-31-Managing-Frontend-in-the-microservices-architecture/opbox-architecture.gif\" />\n</p>\n<h4>OpBox Core</h4>\n<p>Primary responsibility of OpBox Core is serving page definitions for frontend renderers.\nMoreover, Core provides an API to OpBox Admin for page management (creating, editing, publishing).</p>\n<p>Core is the only stateful service in the OpBox family.\nIt stores page definitions in MongoDB and box <em>types</em> in Git (box types are explained below).</p>\n<p>Since Core is responsible for serving page definitions it also manages the page routing\nand the toughest work — fetching data from backend services. That’s the content to be injected into\nBoxes.</p>\n<p>We’ve put a lot of effort into making Core high-performing, fault-tolerant and asynchronous.\nWe’ve chosen Java and Groovy to implement it.\nCore is the only gateway for frontend renderers to our internal backend services.</p>\n<p><strong>Box types</strong> <br/>\nEach Box has a type — it’s the definition that describes data parameters required\nby the Box and also defines a list of named slots. Slot is a placeholder for embedding child boxes.\nWe use (<a href=\"http://json-schema.org/\">JSON Schema</a>) to define parameter types.</p>\n<p>Here is an example of the Showcase Box — along with its type and the type of the data parameter that it uses.</p>\n<p>Showcase Box type:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;slots&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;parameters&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;allegro.box.showcase&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n        <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;CUSTOM&quot;</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-attr\">&quot;typeName&quot;</span> <span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;allegro.type.showcasesList&quot;</span>\n      <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;description&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Showcase box&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;required&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">false</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;nameRequired&quot;</span> <span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>Showcase data parameter type:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;title&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;allegro.showcasesList&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;description&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;showcases list&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;array&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;items&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;description&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;showcase&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;object&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;properties&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;imageUrl&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n        <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;string&quot;</span>\n      <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;imageAlt&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n        <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;string&quot;</span>\n      <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;linkUrl&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n        <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;string&quot;</span>\n      <span class=\"hljs-punctuation\">}</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>Rendered Showcase Box:</p>\n<p><img src=\"/img/articles/2016-01-31-Managing-Frontend-in-the-microservices-architecture/showcase_box.jpg\" alt=\"rendered showcase box\" title=\"rendered showcase box\"></p>\n<p><strong>Data-source type</strong> is our way to specify underlying backend microservice.\nIt contains: service URL in Service Discovery, input parameters, timeout and caching configuration.\nFor example:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;url&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;service://opbox-content/teasers&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;parameters&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n        <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;INTEGER&quot;</span>\n      <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;id&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;description&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;article identifiers&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;required&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;dataType&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;allegro.article.teasers&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;timeoutMillis&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">1500</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;allowCustomParameters&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">false</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;ttlMillis&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">60000</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h4>OpBox Web renderer</h4>\n<p>Web renderer is responsible for handling HTTP requests.\nFrom the Web renderer’s point of view, page rendering process can be decomposed into the following steps:</p>\n<ul>\n<li>HTTP request for a given URL is received.</li>\n<li>OpBox Core is asked for a page definition for a given URL.</li>\n<li>OpBox Core sends a page definition which contains page matadata and the Boxes tree.\nEach Box is filled with data gathered by Core from backend microservices.</li>\n<li>Web renderer traverses the Boxes tree and for each Box:\n<ul>\n<li>Proper component implementation is found in our internal repository (matched by the Box type name).</li>\n<li>Component’s <code>render()</code> function is called with box parameters passed as an argument.</li>\n<li><code>render()</code> result is appended to the HTTP response.</li>\n</ul>\n</li>\n</ul>\n<p>We’ve implemented Web renderer in <a href=\"https://nodejs.org/en/docs/es6/\">ES6</a> on <a href=\"https://nodejs.org/en/\">NodeJS</a> platform.\nComponents are implemented as <a href=\"https://www.npmjs.com/\">NPM</a> packages and they are published to our\ninternal <a href=\"https://www.jfrog.com/artifactory/\">Artifactory</a>.</p>\n<h4>OpBox Mobile renderer library</h4>\n<p>One of our requirements was support for mobile platforms. We’ve created an Android library for rendering pages\nin the same way as Web renderer does but using native mobile code.\nWhen OpBox editor creates a web page he doesn’t have to care about its mobile version.\nHis page should be available both on website and on mobile app.</p>\n<p>This way mobile developers can improve user experience using the same component definitions.\nBy the way — now we can update our pages in your phone instantly ;) (without deploying the new version of the mobile app)</p>\n<h4>OpBox Mobile Adapter</h4>\n<p>We wanted to treat all rendering channels equally so we’re providing one REST API for retrieving page definitions from Core.\nWe’ve created an adapter which transforms the Core API to the mobile friendly version.\nIts main responsibilities are: converting JSON to more concise form, filtering out any mobile-irrelevant data,\nadding deep linking feature and filtering all boxes that are not supported on mobile app.</p>\n<h4>OpBox Admin</h4>\n<p>Simultaneously, we are developing an Admin application for page editors.</p>\n<p>It’s a stateless GUI built on top of the Core REST API.\nIn OpBox Admin our editors create and maintain pages and\nthey manage page routing and publication criteria.</p>\n<p>We’ve implemented OpBox Admin using ES6, NodeJS and <a href=\"https://facebook.github.io/react/\">React</a>.</p>\n<p>Here you can see the sample screen of our Admin GUI:\n<img src=\"/img/articles/2016-01-31-Managing-Frontend-in-the-microservices-architecture/opbox-admin.png\" alt=\"opbox admin\" title=\"Obpox Admin\"></p>\n<h3>Final thoughts</h3>\n<p>Currently some of our marketing campaigns are published with OpBox.\nThe solution has been battle-tested and we are planning to migrate more Allegro pages into OpBox components.\nWe hope to share our OpBox project with the open source community in near future.</p>\n","excerpt":"<p><a href=\"http://martinfowler.com/articles/microservices.html\">Microservices</a>\nare now the mainstream approach for scalable systems architecture.\nThere is little controversy when we are talking about designing backend services.\nWell-behaved backend microservice should cover one\n<a href=\"http://martinfowler.com/bliki/BoundedContext.html\">BoundedContext</a>\nand communicate over the REST API. <br/>\nThings get complicated when we need to\nuse microservices as building blocks for a frontend solution.\nHow to build a consistent website or a mobile app\nusing tens or sometimes hundreds of microservices?</p>\n","date":"2016-03-12T00:00:00.000Z","year":"2016","month":"03","day":"12","slug":"2016-03-Managing-Frontend-in-the-microservices-architecture","author":[{"author":"bartosz.galek","name":"Bartosz Gałek","bio":"Software test engineer with a relevant full stack experience from various companies, who helps achieve better quality results by testing software and sharing knowledge. Testing has been his life since 2011. A real team member, involved not only in all the testing, but also in the final delivery of the product to end users. Besides testing, he loves all kinds of cars and PC games. A big fan of donuts.","linkedin":"paweł-zwierzchowski"},{"author":"bartosz.walacik","name":"Bartosz Walacik","bio":"Software Development Manager with over twenty years of experience in IT and e-commerce. At Allegro he manages the work of 150+ engineers taking care of their continuous substantive development, he is responsible for the technical quality, stability and efficiency of the Allegro platform. He likes simple solutions which gives more possibilities than originally planned :)","twitter":"nigraspl"},{"author":"pawel.wieladek","name":"Paweł Wielądek","bio":"Doer. Microsoft MVP. Master of Science. Speaker and blogger. VP at devwarsztaty.pl. CxO of dotnetomaniak.pl. Don't Stapp me now, please!","twitter":"ptrstpp950","linkedin":"piotrstapp"}]}]